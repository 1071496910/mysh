// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	UploadRequest
	UploadResponse
	SearchRequest
	SearchResponse
	LoginRequest
	LoginResponse
	LogoutRequest
	LogoutResponse
	CertRequest
	CertEntry
	CommonQueryRequest
	CommonQueryResponse
	CommonQueryListResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadRequest struct {
	Uid    string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Record string `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
	Token  string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *UploadRequest) Reset()                    { *m = UploadRequest{} }
func (m *UploadRequest) String() string            { return proto1.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()               {}
func (*UploadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UploadRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UploadRequest) GetRecord() string {
	if m != nil {
		return m.Record
	}
	return ""
}

func (m *UploadRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UploadResponse struct {
	ErrorMsg     string `protobuf:"bytes,1,opt,name=errorMsg" json:"errorMsg,omitempty"`
	ResponseCode int32  `protobuf:"varint,2,opt,name=responseCode" json:"responseCode,omitempty"`
}

func (m *UploadResponse) Reset()                    { *m = UploadResponse{} }
func (m *UploadResponse) String() string            { return proto1.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()               {}
func (*UploadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *UploadResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

type SearchRequest struct {
	Uid          string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	SearchString string `protobuf:"bytes,2,opt,name=searchString" json:"searchString,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto1.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *SearchRequest) GetSearchString() string {
	if m != nil {
		return m.SearchString
	}
	return ""
}

func (m *SearchRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SearchResponse struct {
	Response     []string `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
	ResponseCode int32    `protobuf:"varint,2,opt,name=responseCode" json:"responseCode,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto1.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchResponse) GetResponse() []string {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SearchResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

type LoginRequest struct {
	Uid      string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto1.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	ResponseCode int32  `protobuf:"varint,1,opt,name=responseCode" json:"responseCode,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto1.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type LogoutRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto1.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LogoutRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type LogoutResponse struct {
	ResponseCode int32 `protobuf:"varint,1,opt,name=responseCode" json:"responseCode,omitempty"`
}

func (m *LogoutResponse) Reset()                    { *m = LogoutResponse{} }
func (m *LogoutResponse) String() string            { return proto1.CompactTextString(m) }
func (*LogoutResponse) ProtoMessage()               {}
func (*LogoutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LogoutResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

type CertRequest struct {
}

func (m *CertRequest) Reset()                    { *m = CertRequest{} }
func (m *CertRequest) String() string            { return proto1.CompactTextString(m) }
func (*CertRequest) ProtoMessage()               {}
func (*CertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type CertEntry struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *CertEntry) Reset()                    { *m = CertEntry{} }
func (m *CertEntry) String() string            { return proto1.CompactTextString(m) }
func (*CertEntry) ProtoMessage()               {}
func (*CertEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CertEntry) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CommonQueryRequest struct {
	Req string `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
}

func (m *CommonQueryRequest) Reset()                    { *m = CommonQueryRequest{} }
func (m *CommonQueryRequest) String() string            { return proto1.CompactTextString(m) }
func (*CommonQueryRequest) ProtoMessage()               {}
func (*CommonQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommonQueryRequest) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type CommonQueryResponse struct {
	Resp string `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
}

func (m *CommonQueryResponse) Reset()                    { *m = CommonQueryResponse{} }
func (m *CommonQueryResponse) String() string            { return proto1.CompactTextString(m) }
func (*CommonQueryResponse) ProtoMessage()               {}
func (*CommonQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CommonQueryResponse) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

type CommonQueryListResponse struct {
	Resp []string `protobuf:"bytes,1,rep,name=resp" json:"resp,omitempty"`
}

func (m *CommonQueryListResponse) Reset()                    { *m = CommonQueryListResponse{} }
func (m *CommonQueryListResponse) String() string            { return proto1.CompactTextString(m) }
func (*CommonQueryListResponse) ProtoMessage()               {}
func (*CommonQueryListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CommonQueryListResponse) GetResp() []string {
	if m != nil {
		return m.Resp
	}
	return nil
}

func init() {
	proto1.RegisterType((*UploadRequest)(nil), "UploadRequest")
	proto1.RegisterType((*UploadResponse)(nil), "UploadResponse")
	proto1.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto1.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto1.RegisterType((*LoginRequest)(nil), "LoginRequest")
	proto1.RegisterType((*LoginResponse)(nil), "LoginResponse")
	proto1.RegisterType((*LogoutRequest)(nil), "LogoutRequest")
	proto1.RegisterType((*LogoutResponse)(nil), "LogoutResponse")
	proto1.RegisterType((*CertRequest)(nil), "CertRequest")
	proto1.RegisterType((*CertEntry)(nil), "CertEntry")
	proto1.RegisterType((*CommonQueryRequest)(nil), "CommonQueryRequest")
	proto1.RegisterType((*CommonQueryResponse)(nil), "CommonQueryResponse")
	proto1.RegisterType((*CommonQueryListResponse)(nil), "CommonQueryListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchService service

type SearchServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
}

type searchServiceClient struct {
	cc *grpc.ClientConn
}

func NewSearchServiceClient(cc *grpc.ClientConn) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/SearchService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := grpc.Invoke(ctx, "/SearchService/Upload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/SearchService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := grpc.Invoke(ctx, "/SearchService/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchService service

type SearchServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
}

func RegisterSearchServiceServer(s *grpc.Server, srv SearchServiceServer) {
	s.RegisterService(&_SearchService_serviceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchService_Search_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _SearchService_Upload_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SearchService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SearchService_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

// Client API for CertService service

type CertServiceClient interface {
	Cert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertEntry, error)
}

type certServiceClient struct {
	cc *grpc.ClientConn
}

func NewCertServiceClient(cc *grpc.ClientConn) CertServiceClient {
	return &certServiceClient{cc}
}

func (c *certServiceClient) Cert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertEntry, error) {
	out := new(CertEntry)
	err := grpc.Invoke(ctx, "/CertService/Cert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CertService service

type CertServiceServer interface {
	Cert(context.Context, *CertRequest) (*CertEntry, error)
}

func RegisterCertServiceServer(s *grpc.Server, srv CertServiceServer) {
	s.RegisterService(&_CertService_serviceDesc, srv)
}

func _CertService_Cert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertServiceServer).Cert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CertService/Cert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertServiceServer).Cert(ctx, req.(*CertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CertService",
	HandlerType: (*CertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cert",
			Handler:    _CertService_Cert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

// Client API for DashService service

type DashServiceClient interface {
	ClientUid(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryResponse, error)
	UidState(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryResponse, error)
	UidEndpoint(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryResponse, error)
	UidClients(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryListResponse, error)
}

type dashServiceClient struct {
	cc *grpc.ClientConn
}

func NewDashServiceClient(cc *grpc.ClientConn) DashServiceClient {
	return &dashServiceClient{cc}
}

func (c *dashServiceClient) ClientUid(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryResponse, error) {
	out := new(CommonQueryResponse)
	err := grpc.Invoke(ctx, "/DashService/ClientUid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashServiceClient) UidState(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryResponse, error) {
	out := new(CommonQueryResponse)
	err := grpc.Invoke(ctx, "/DashService/UidState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashServiceClient) UidEndpoint(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryResponse, error) {
	out := new(CommonQueryResponse)
	err := grpc.Invoke(ctx, "/DashService/UidEndpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashServiceClient) UidClients(ctx context.Context, in *CommonQueryRequest, opts ...grpc.CallOption) (*CommonQueryListResponse, error) {
	out := new(CommonQueryListResponse)
	err := grpc.Invoke(ctx, "/DashService/UidClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DashService service

type DashServiceServer interface {
	ClientUid(context.Context, *CommonQueryRequest) (*CommonQueryResponse, error)
	UidState(context.Context, *CommonQueryRequest) (*CommonQueryResponse, error)
	UidEndpoint(context.Context, *CommonQueryRequest) (*CommonQueryResponse, error)
	UidClients(context.Context, *CommonQueryRequest) (*CommonQueryListResponse, error)
}

func RegisterDashServiceServer(s *grpc.Server, srv DashServiceServer) {
	s.RegisterService(&_DashService_serviceDesc, srv)
}

func _DashService_ClientUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashServiceServer).ClientUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DashService/ClientUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashServiceServer).ClientUid(ctx, req.(*CommonQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashService_UidState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashServiceServer).UidState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DashService/UidState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashServiceServer).UidState(ctx, req.(*CommonQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashService_UidEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashServiceServer).UidEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DashService/UidEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashServiceServer).UidEndpoint(ctx, req.(*CommonQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashService_UidClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashServiceServer).UidClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DashService/UidClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashServiceServer).UidClients(ctx, req.(*CommonQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DashService",
	HandlerType: (*DashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientUid",
			Handler:    _DashService_ClientUid_Handler,
		},
		{
			MethodName: "UidState",
			Handler:    _DashService_UidState_Handler,
		},
		{
			MethodName: "UidEndpoint",
			Handler:    _DashService_UidEndpoint_Handler,
		},
		{
			MethodName: "UidClients",
			Handler:    _DashService_UidClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

func init() { proto1.RegisterFile("proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x9b, 0x26, 0x24, 0x93, 0xd8, 0x41, 0xdb, 0x0a, 0x2c, 0x9f, 0xc2, 0x4a, 0x54, 0xe4,
	0xc0, 0x22, 0x85, 0x0f, 0x21, 0xc1, 0x2d, 0xf4, 0x80, 0x54, 0x04, 0x24, 0xf2, 0x89, 0x93, 0xc9,
	0x8e, 0xc2, 0x8a, 0x76, 0xd7, 0xd9, 0xdd, 0x80, 0xfa, 0xcf, 0xf8, 0x5f, 0xfc, 0x81, 0xca, 0x6b,
	0x6f, 0x62, 0xb7, 0xb1, 0xd4, 0x5e, 0xac, 0x7d, 0xe3, 0x37, 0x33, 0x6f, 0xe7, 0x8d, 0x0d, 0xc3,
	0x5c, 0x2b, 0xab, 0x98, 0x7b, 0xd2, 0xaf, 0x10, 0xa6, 0xf9, 0xa5, 0xca, 0xf8, 0x02, 0x37, 0x5b,
	0x34, 0x96, 0x3c, 0x86, 0xce, 0x56, 0xf0, 0x38, 0x98, 0x04, 0x2f, 0x06, 0x8b, 0xe2, 0x48, 0x9e,
	0x40, 0x4f, 0xe3, 0x4a, 0x69, 0x1e, 0x1f, 0xb9, 0x60, 0x85, 0xc8, 0x29, 0x74, 0xad, 0xfa, 0x8d,
	0x32, 0xee, 0xb8, 0x70, 0x09, 0xe8, 0x37, 0x88, 0x7c, 0x41, 0x93, 0x2b, 0x69, 0x90, 0x24, 0xd0,
	0x47, 0xad, 0x95, 0xfe, 0x62, 0xd6, 0x55, 0xd9, 0x1d, 0x26, 0x14, 0x46, 0xba, 0xe2, 0xcd, 0x15,
	0x47, 0xd7, 0xa1, 0xbb, 0x68, 0xc4, 0xe8, 0x0f, 0x08, 0x97, 0x98, 0xe9, 0xd5, 0xaf, 0x76, 0x89,
	0x14, 0x46, 0xc6, 0x51, 0x96, 0x56, 0x0b, 0xb9, 0xae, 0x84, 0x36, 0x62, 0xed, 0x72, 0x7d, 0xf1,
	0xbd, 0x5c, 0xdf, 0x3e, 0x0e, 0x26, 0x9d, 0x42, 0xae, 0xc7, 0xf7, 0x92, 0xfb, 0x11, 0x46, 0x17,
	0x6a, 0x2d, 0x64, 0xbb, 0xda, 0x04, 0xfa, 0x79, 0x66, 0xcc, 0xdf, 0xfd, 0x48, 0x77, 0x98, 0x7e,
	0x86, 0xb0, 0xca, 0x6e, 0x69, 0x19, 0xdc, 0x6d, 0xb9, 0xbf, 0xda, 0x51, 0xfd, 0x6a, 0xcf, 0x5c,
	0x29, 0xb5, 0xb5, 0xad, 0x4a, 0xe8, 0x1b, 0x88, 0x3c, 0xe5, 0xfe, 0xed, 0x68, 0x08, 0xc3, 0x39,
	0x6a, 0x5f, 0x96, 0x3e, 0x87, 0x41, 0x01, 0xcf, 0xa5, 0xd5, 0xd7, 0x24, 0x86, 0x47, 0x2b, 0x25,
	0x2d, 0x4a, 0x5b, 0xf5, 0xf1, 0x90, 0x9e, 0x01, 0x99, 0xab, 0xab, 0x2b, 0x25, 0xbf, 0x6f, 0x51,
	0x5f, 0xd7, 0x34, 0x69, 0xdc, 0x78, 0x4d, 0x1a, 0x37, 0x74, 0x0a, 0x27, 0x0d, 0x5e, 0x25, 0x8c,
	0xc0, 0x71, 0x21, 0xa2, 0x62, 0xba, 0x33, 0x7d, 0x09, 0x4f, 0x6b, 0xd4, 0x0b, 0x61, 0xec, 0x01,
	0x7a, 0xc7, 0xd3, 0x67, 0xff, 0x02, 0xbf, 0x49, 0x4b, 0xd4, 0x7f, 0xc4, 0x0a, 0xc9, 0x14, 0x7a,
	0x65, 0x80, 0x44, 0xac, 0xb1, 0x63, 0xc9, 0x98, 0xdd, 0x5a, 0x8b, 0x29, 0xf4, 0xca, 0xbd, 0x26,
	0x11, 0x6b, 0x7c, 0x31, 0xc9, 0x98, 0xdd, 0x5a, 0xf8, 0x33, 0xe8, 0x3a, 0x0f, 0x49, 0xc8, 0xea,
	0x9b, 0x90, 0x44, 0xac, 0x69, 0xed, 0x14, 0x7a, 0xe5, 0xf4, 0x89, 0x7b, 0xb3, 0x77, 0x2a, 0x19,
	0xb3, 0xa6, 0x2d, 0xb3, 0x57, 0xe5, 0xc8, 0xbd, 0xee, 0x09, 0x1c, 0x17, 0x90, 0x8c, 0x58, 0xcd,
	0x88, 0x04, 0xd8, 0xce, 0x87, 0xd9, 0xff, 0x00, 0x86, 0x9f, 0x32, 0xb3, 0xbb, 0xe9, 0x3b, 0x18,
	0xcc, 0x2f, 0x05, 0x4a, 0x9b, 0x0a, 0x4e, 0x4e, 0xd8, 0x5d, 0x27, 0x92, 0x53, 0x76, 0x68, 0xec,
	0x6f, 0xa1, 0x9f, 0x0a, 0xbe, 0xb4, 0x99, 0xc5, 0x87, 0xa4, 0xbd, 0x87, 0x61, 0x2a, 0xf8, 0xb9,
	0xe4, 0xb9, 0x12, 0xd2, 0x3e, 0x24, 0xf3, 0x03, 0x40, 0x2a, 0x78, 0xa9, 0xd5, 0x1c, 0x4e, 0x8c,
	0x59, 0x8b, 0xeb, 0x3f, 0x7b, 0xee, 0xa7, 0xf6, 0xfa, 0x26, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x24,
	0x8b, 0xfa, 0xe3, 0x04, 0x00, 0x00,
}
